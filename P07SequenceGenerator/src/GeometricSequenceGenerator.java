
// Title: GeometricSequenceGenerator
// Files: Iterator
// Course: CS300 Fall 2018
//
// Author: Michael Goldstein
// Email: mdgoldstein2@wisc.edu
// Lecturer's Name: Alexi Brooks

import java.util.Iterator;

/**
 * This class represents a generator for a geometric progression This class implements the
 * Iterator<Integer> interface
 * 
 * @author Michael Goldstein
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence

  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method

  /**
   * Constructor. Creates a geometric progression given the parameters
   * 
   * @param init  the initial value of the progression
   * @param ratio the common ration between adjacent terms in the progression
   * @param size  the number of terms in the progression
   * @throws IllegalArgumentException if size or ratio is less than or equal to 0 and initial value
   *                                  is less than 0
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // check for the precondition: size > 0, throws an IllegalArgumentException if this precondition
    // is not satisfied
    if (size <= 0)
      throw new IllegalArgumentException(
          "WARNING: " + "CANNOT create a sequence with size <= zero.");
    // check for the validity of init (>=0) and ratio (>0), throw an IllegalArgumentException
    // if these two parameters are not valid
    if (init < 0 || ratio <= 0)
      throw new IllegalArgumentException(
          "WARNING: The starting element and the common ratio for a geometric progression should be"
              + " STRICTLY POSITIVE.");

    // set the instance fields
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    next = init; // initializes next to the first element in this arithmetic progression
    generatedCount = 0;
  }

  /**
   * Checks if the iteration has a next element in this sequence
   * 
   * @return true if the current element in the iteration has a next element in this sequence, false
   *         otherwise
   */
  @Override
  public boolean hasNext() {
    // time complexity: O(1)
    if (generatedCount < SIZE) {
      return true;
    } else {
      return false;
    }
  }

  /**
   * Returns the next element in this geometric sequence iteration with respect to the numbers
   * generated so far
   * 
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    // time complexity: O(1)
    if (!hasNext()) {// check if the current element has a next element in this sequence
      return null;
    }
    int current = next; // set the current element to next
    generatedCount++; // increment the number of generated elements so far
    next *= RATIO; // set the next element (multiplies the current number by the common ratio)
    return current; // return the current number as the generated one
  }
}
